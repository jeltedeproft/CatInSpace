plugins { id 'org.beryx.runtime' version '1.12.7' }

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'com.jelte.myGames.lwjgl3.Lwjgl3Launcher'
eclipse.project.name = appName + '-lwjgl3'
sourceCompatibility = 17

dependencies {
	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	implementation "com.badlogicgames.gdx-video:gdx-video-lwjgl3:$gdxVideoVersion"
	implementation "com.github.crykn:libgdx-screenmanager:$screenManagerVersion"
	implementation project(':core')
}

def os = System.properties['os.name'].toLowerCase()
def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)

run {
	workingDir = rootProject.file('assets').path
	setIgnoreExitValue(true)

	if (os.contains('mac')) {
		// Required to run LWJGL3 Java apps on MacOS
		jvmArgs += "-XstartOnFirstThread"
	}
}

jar {
	destinationDirectory = file("$buildDir/lib")
	archiveFileName = "${appName}-${archiveVersion.get()}.jar"
// sets the name of the .jar file this produces to the name of the game or app.
	archiveBaseName.set(appName)
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	//uncomment if not on 9.11 or later
	exclude('linux/arm32/**', 'linux/arm64/**')
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
// setting the manifest makes the JAR runnable.
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
// this last step may help on some OSes that need extra instruction to make runnable JARs.
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
task dist(dependsOn: [jar]) {
}


jpackageImage.dependsOn dist

task copyToLib(type: Copy) {
    into "${buildDir}/lib"
    from configurations.runtimeClasspath
    duplicatesStrategy = 'include'
}

installDist{
    duplicatesStrategy = 'include'
}

build.dependsOn(copyToLib)

apply plugin: "org.beryx.runtime"
runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base' ,
               'java.desktop',
               'jdk.unsupported']
    distDir = file(buildDir)

    jpackage {
        //jpackageHome = '/usr/lib/jvm/open-jdk'
       mainJar = jar.archiveFileName.get()
        mainClass = project.mainClassName
        installerName = imageName = appName
        if (osName.contains('windows')) {
        installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut', '--win-upgrade-uuid', '384b3846-8585-45d1-a1e3-5e5145019591']
            imageOptions = ["--icon", file("../icons/icon.ico")]
        } else if (osName.contains('linux')) {
            imageOptions = ["--icon", file("../icons/icon.png")]
        } else if (osName.contains('mac')) {
            imageOptions = ["--icon", file("../icons/icon.icns")]
        }
    }
}
